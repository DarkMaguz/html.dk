<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<TITLE>Pattern Property</TITLE>
<!--CSS_START-->
<style>@import url(../html-vss/msdnie4a.css);</style>
<link disabled rel="stylesheet" href="../html-vss/msdn_ie3.css">
<!--CSS_END-->
</HEAD>
<BODY>


<!--Start Head-->
<TABLE class="banner" width="100%" CELLSPACING=0>
<TR>
<TD class="bannerleft" nowrap>Visual&nbsp;Basic&nbsp;Scripting&nbsp;Edition</TD>
<TD class="bannerright" nowrap><a href="../html-vss/vbsTOC.htm">Language Reference</a></TD>
</TR>
</TABLE>
<HR>
<!--End Head-->

<H1><A NAME="vspropattern"></A>Pattern Property</H1>

<P>Sets or returns the regular expression pattern being searched for. </P>

<P><CODE>object<B>.Pattern</B> [= "searchstring"]</CODE></P>

<H4>Arguments</H4>

<P class=dt><I>object</I></P>

<P class=indent>Required. Always a <B>RegExp</B> object variable.</P>

<P class=dt><I>searchstring</I></P>

<P class=indent>Optional. Regular <A HREF="vtglossary.htm#defstringexpressionvbs">string expression</A> being searched for. May include any of the regular expression characters defined in the table in the <B>Settings</B> section.</P>

<H4>Settings</H4>

<P>Special characters and sequences are used in writing patterns for regular expressions. The following table describes and gives an example of the characters and sequences that can be used.</P>

<TABLE border=1 cellspacing=0 cols=2 frame=box rules=all>

<TR VALIGN="top">
<TH width=21%>Character</TH>
<TH width=79%>Description</TH>
</TR>

<TR VALIGN="top">
<TD width=21%><B>\ </B></TD>
<TD width=79%>Marks the next character as either a special character or a literal. For example, "n" matches the character "n". "\n" matches a newline character. The sequence "\\" matches "\" and "\(" matches "(".</TD>
</TR>

<TR VALIGN="top">
<TD width=21%><B>^ </B></TD>
<TD width=79%>Matches the beginning of input.</TD>
</TR>

<TR VALIGN="top">
<TD width=21%><B>$ </B></TD>
<TD width=79%>Matches the end of input.</TD>
</TR>

<TR VALIGN="top">
<TD width=21%><B>* </B></TD>
<TD width=79%>Matches the preceding character zero or more times. For example, "zo*" matches either "z" or "zoo".</TD>
</TR>

<TR VALIGN="top">
<TD width=21%><B>+ </B></TD>
<TD width=79%>Matches the preceding character one or more times. For example, "zo+" matches "zoo" but not "z".</TD>
</TR>

<TR VALIGN="top">
<TD width=21%><B>? </B></TD>
<TD width=79%>Matches the preceding character zero or one time. For example, "a?ve?" matches the "ve" in "never". </TD>
</TR>

<TR VALIGN="top">
<TD width=21%>.</TD>
<TD width=79%>Matches any single character except a newline character. </TD>
</TR>

<TR VALIGN="top">
<TD width=21%><B>(</B>pattern<B>)</B> </TD>
<TD width=79%>Matches <I>pattern</I> and remembers the match. The matched substring can be retrieved from the resulting <B>Matches</B> collection, using Item <B>[0]...[n]</B>. To match parentheses characters ( ), use "\(" or "\)".</TD>
</TR>

<TR VALIGN="top">
<TD width=21%>x<B>|</B>y</TD>
<TD width=79%>Matches either <I>x</I> or <I>y</I>. For example, "z|food" matches "z" or "food". "(z|f)oo" matches "zoo" or "food". </TD>
</TR>

<TR VALIGN="top">
<TD width=21%>{<I>n</I>}</TD>
<TD width=79%><I>n</I> is a nonnegative integer. Matches exactly <I>n</I> times. For example, "o{2}" does not match the "o" in "Bob," but matches the first two o's in "foooood".</TD>
</TR>

<TR VALIGN="top">
<TD width=21%>{<I>n</I>,} </TD>
<TD width=79%><I>n</I> is a nonnegative integer. Matches at least <I>n</I> times. For example, "o{2,}" does not match the "o" in "Bob" and matches all the o's in "foooood." "o{1,}" is equivalent to "o+". "o{0,}" is equivalent to "o*".</TD>
</TR>

<TR VALIGN="top">
<TD width=21%><B>{</B><I>n</I><B>,</B><I>m</I><B>}</B> </TD>
<TD width=79%><I>m</I> and <I>n</I> are nonnegative integers. Matches at least <I>n</I> and at most <I>m</I> times. For example, "o{1,3}" matches the first three o's in "fooooood." "o{0,1}" is equivalent to "o?".</TD>
</TR>

<TR VALIGN="top">
<TD width=21%><B>[</B><I>xyz</I><B>]</B> </TD>
<TD width=79%>A character set. Matches any one of the enclosed characters. For example, "[abc]" matches the "a" in "plain". </TD>
</TR>

<TR VALIGN="top">
<TD width=21%><B>[^</B><I>xyz</I><B>]</B> </TD>
<TD width=79%>A negative character set. Matches any character not enclosed. For example, "[^abc]" matches the "p" in "plain". </TD>
</TR>

<TR VALIGN="top">
<TD width=21%><B>[</B><I>a-z</I><B>]</B> </TD>
<TD width=79%>A range of characters. Matches any character in the specified range. For example, "[a-z]" matches any lowercase alphabetic character in the range "a" through "z". </TD>
</TR>

<TR VALIGN="top">
<TD width=21%><B>[^</B><I>m-z</I><B>]</B> </TD>
<TD width=79%>A negative range characters. Matches any character not in the specified range. For example, "[m-z]" matches any character not in the range "m" through "z". </TD>
</TR>

<TR VALIGN="top">
<TD width=21%>\b </TD>
<TD width=79%>Matches a word boundary, that is, the position between a word and a space. For example, "er\b" matches the "er" in "never" but not the "er" in "verb". </TD>
</TR>

<TR VALIGN="top">
<TD width=21%>\B </TD>
<TD width=79%>Matches a nonword boundary. "ea*r\B" matches the "ear" in "never early". </TD>
</TR>

<TR VALIGN="top">
<TD width=21%>\d </TD>
<TD width=79%>Matches a digit character. Equivalent to [0-9]. </TD>
</TR>

<TR VALIGN="top">
<TD width=21%>\D </TD>
<TD width=79%>Matches a nondigit character. Equivalent to [^0-9]. </TD>
</TR>

<TR VALIGN="top">
<TD width=21%>\f </TD>
<TD width=79%>Matches a form-feed character. </TD>
</TR>

<TR VALIGN="top">
<TD width=21%>\n </TD>
<TD width=79%>Matches a newline character. </TD>
</TR>

<TR VALIGN="top">
<TD width=21%>\r </TD>
<TD width=79%>Matches a carriage return character. </TD>
</TR>

<TR VALIGN="top">
<TD width=21%>\s </TD>
<TD width=79%>Matches any white space including space, tab, form-feed, etc. Equivalent to "[&nbsp;\f\n\r\t\v]".</TD>
</TR>

<TR VALIGN="top">
<TD width=21%>\S </TD>
<TD width=79%>Matches any nonwhite space character. Equivalent to "[^&nbsp;\f\n\r\t\v]". </TD>
</TR>

<TR VALIGN="top">
<TD width=21%>\t </TD>
<TD width=79%>Matches a tab character. </TD>
</TR>

<TR VALIGN="top">
<TD width=21%>\v </TD>
<TD width=79%>Matches a vertical tab character. </TD>
</TR>

<TR VALIGN="top">
<TD width=21%>\w </TD>
<TD width=79%>Matches any word character including underscore. Equivalent to "[A-Za-z0-9_]". </TD>
</TR>

<TR VALIGN="top">
<TD width=21%>\W </TD>
<TD width=79%>Matches any nonword character. Equivalent to "[^A-Za-z0-9_]". </TD>
</TR>

<TR VALIGN="top">
<TD width=21%><B>\</B>num </TD>
<TD width=79%>Matches <I>num</I>, where <I>num</I> is a positive integer. A reference back to remembered matches. For example, "(.)\1" matches two consecutive identical characters. </TD>
</TR>

<TR VALIGN="top">
<TD width=21%><B>\</B><I>n</I></TD>
<TD width=79%>Matches <I>n</I>, where <I>n</I> is an octal escape value. Octal escape values must be 1, 2, or 3 digits long. For example, "\11" and "\011" both match a tab character. "\0011" is the equivalent of "\001" &amp; "1". Octal escape values must not exceed 256. If they do, only the first two digits comprise the expression. Allows ASCII codes to be used in regular expressions.</TD>
</TR>

<TR VALIGN="top">
<TD width=21%>\x<I>n</I></TD>
<TD width=79%>Matches <I>n</I>, where <I>n</I> is a hexadecimal escape value. Hexadecimal escape values must be exactly two digits long. For example, "\x41" matches "A". "\x041" is equivalent to "\x04" &amp; "1". Allows ASCII codes to be used in regular expressions.</TD>
</TR>
</TABLE><BR>

<H4>Remarks</H4>

<P>The following code illustrates the use of the <B>Pattern</B> property. </P>

<PRE><CODE>Function RegExpTest(patrn, strng)
&nbsp;&nbsp;&nbsp;Dim regEx, Match, Matches&nbsp;&nbsp;&nbsp;' Create variable.
&nbsp;&nbsp;&nbsp;Set regEx = New RegExp&nbsp;&nbsp;&nbsp;' Create a regular expression.
&nbsp;&nbsp;&nbsp;<span class=cfe><B>regEx.Pattern = </B></span>patrn&nbsp;&nbsp;&nbsp;' Set pattern.
&nbsp;&nbsp;&nbsp;regEx.IgnoreCase = True&nbsp;&nbsp;&nbsp;' Set case insensitivity.
&nbsp;&nbsp;&nbsp;regEx.Global = True&nbsp;&nbsp;&nbsp;' Set global applicability.
&nbsp;&nbsp;&nbsp;Set Matches = regEx.Execute(strng)&nbsp;&nbsp;&nbsp;' Execute search.
&nbsp;&nbsp;&nbsp;For Each Match in Matches&nbsp;&nbsp;&nbsp;' Iterate Matches collection.
      RetStr = RetStr &amp; "Match found at position "
      RetStr = RetStr &amp; Match.FirstIndex &amp; ". Match Value is '"
      RetStr = RetStr &amp; Match.Value &amp; "'." &amp; vbCRLF
&nbsp;&nbsp;&nbsp;Next
&nbsp;&nbsp;&nbsp;RegExpTest = RetStr
End Function
MsgBox(RegExpTest("is.", "IS1 is2 IS3 is4"))</CODE></PRE>

<H4>Requirements</H4>

<P><A HREF="vtoriversioninformation.htm">Version 2</A> </P>

<H4>See Also</H4>

<P><A HREF="vsproglobal.htm">Global Property</A> | <A HREF="vsproignorecase.htm">IgnoreCase Property</A></P>

<P>Applies To: <A HREF="vsobjregexp.htm">RegExp Object</A></P>
<!--Copyright_START-->
<DIV CLASS="footer">
<HR><a href="vbscopy.htm">&copy;2000 Microsoft Corporation. All rights reserved.</a><br>
</DIV> <!--Copyright_END-->

</BODY>
</HTML>
